//draw the trees with nodes and brackes
//# indicates the end of a tree
//the first line input the number of trees




#include<stdio.h>
#include<cstdio>
#include<cctype>
#include<cstring>
using namespace std;

const int maxn=200+10;
int n;
char buf[maxn][maxn];

void dfs(int r,int c)
{
    printf("%c(",buf[r][c]);
    if(r+1<n&&buf[r+1][c]=='|')
    {
        int i=c;
        while(i-1>=0&&buf[r+2][i-1]=='-')i--;
        while(buf[r+2][i]=='-'&&buf[r+3][i]!='\0'){
            if(!isspace(buf[r+3][i]))dfs(r+3,i);
            i++;
        }
    }
    printf(")");
}

void solve()
{
    n=0;
    for(;;){
        fgets(buf[n],maxn,stdin);//read from stdin; read at most maxn-1 chars; put the chars to buf[n]  
        if(buf[n][0]=='#')break;else n++;
    }
    printf("(");
    if(n)
    {
        for(int i=0;i<strlen(buf[0]);i++)
        if(buf[0][i]!=' '){dfs(0,i);break;}
    }
    printf(")\n");
}

int main()
{
    freopen("C:\\Users\\lenovo\\Desktop\\tmp.txt","r",stdin);
    int T;
    fgets(buf[0],maxn,stdin);
    sscanf(buf[0],"%d",&T);//read from buf[0]; the later is equivalent to scanf("%d",&T);
    while(T--)solve();
    fclose(stdin);

}
input
2
       A
       |
-----------
B    C    D
      |     |
   ----- ---
   E    F  G
#
e
|
------
f    g
#


output
(A(B()C()D()))
(e(f()g()))
