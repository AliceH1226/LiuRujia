//given inorder and postorder of a tree, find the smallest weight from the root to the leaf. 
//if there are multiple possibilities, output the one whose weight of the leaf is smaller.




#include<iostream>
#include<stdio.h>
#include<string>
#include<sstream>
#include<algorithm>
using namespace std;

const int maxv=10000+10;
int in_order[maxv],post_order[maxv],lch[maxv],rch[maxv];
int n;

bool read_list(int* a)
{
    string line;
    if(!getline(cin,line))return false;
    stringstream ss(line);
    n=0;
    int x;
    while(ss>>x)a[n++]=x;
    return n>0;
}

int build(int L1,int R1,int L2,int R2)
{

    if(L1>R1)return 0;
    int root=post_order[R2];
    cout<<"R2=="<<R2<<endl;
    cout<<"root=="<<root<<endl;
    int p=L1;//从中序遍历的所有节点，找出根节点
    while(in_order[p]!=root)p++;
    //此时p==root
    int cnt=p-L1;//左节点个数
    lch[root]=build(L1,p-1,L2,L2+cnt-1);
    rch[root]=build(p+1,R1,L2+cnt,R2-1);
    return root;
}

int best,best_sum;

void dfs(int u,int sum)
{
    sum+=u;
    if(!lch[u]&&!rch[u])
    {
        if(sum<best_sum||(sum==best_sum&&u<best)){best=u;best_sum=sum;}
    }
    if(lch[u])dfs(lch[u],sum);
    if(rch[u])dfs(rch[u],sum);
}

int main()
{
    freopen("C:\\Users\\lenovo\\Desktop\\tmp.txt","r",stdin);
    while(read_list(in_order))
    {
        for(int i=0;i<n;i++)
        cout<<in_order[i]<<" ";
    cout<<endl;
        read_list(post_order);
        for(int i=0;i<n;i++)
            cout<<post_order[i]<<" ";
        cout<<endl;
        cout<<endl<<endl<<endl;
        build(0,n-1,0,n-1);
        best_sum=1000000000;
        dfs(post_order[n-1],0);
        cout<<best<<"\n";
    }
    fclose(stdin);
    return 0;
}


input
3 2 1 4 5 7 6
3 1 2 5 6 7 4
7 8 11 3 5 16 12 18
8 3 11 7 16 18 12 5
255
255
output
3 2 1 4 5 7 6
3 1 2 5 6 7 4



R2==6
root==4
R2==2
root==2
R2==0
root==3
R2==1
root==1
R2==5
root==7
R2==3
root==5
R2==4
root==6
1
7 8 11 3 5 16 12 18
8 3 11 7 16 18 12 5



R2==7
root==5
R2==3
root==7
R2==2
root==11
R2==0
root==8
R2==1
root==3
R2==6
root==12
R2==4
root==16
R2==5
root==18
3
255
255



R2==0
root==255
255
